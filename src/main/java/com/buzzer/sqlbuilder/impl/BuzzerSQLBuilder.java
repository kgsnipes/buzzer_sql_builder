package com.buzzer.sqlbuilder.impl;

import com.buzzer.sqlbuilder.SQLBuilder;
import com.buzzer.sqlbuilder.BuzzerDBType;
import com.buzzer.sqlbuilder.dto.Column;
import com.buzzer.sqlbuilder.exception.BuzzerSQLBuilderException;
import com.buzzer.sqlbuilder.util.BuzzerSQLConstants;
import org.apache.commons.lang3.ObjectUtils;
import org.apache.commons.lang3.StringUtils;

import java.util.Arrays;
import java.util.Objects;
import java.util.Optional;


public class BuzzerSQLBuilder implements SQLBuilder {


    private StringBuilder sql=new StringBuilder();

    public SQLBuilder createDatabase(String database)throws BuzzerSQLBuilderException {
        this.validateDatabaseName(database);
        this.sql.append(String.format(BuzzerSQLConstants.CREATE_DATABASE_QUERY_FORMAT,database));
        return this;
    }

    
    public SQLBuilder dropDatabase(String database) throws BuzzerSQLBuilderException{
        this.validateDatabaseName(database);
        this.sql.append(String.format(BuzzerSQLConstants.DROP_DATABASE_QUERY_FORMAT,database));
        return this;
    }

    
    public SQLBuilder useDatabase(String database)throws BuzzerSQLBuilderException {
        this.validateDatabaseName(database);
        this.sql.append(String.format(BuzzerSQLConstants.USE_DATABASE_QUERY_FORMAT,database));
        return this;
    }


    public SQLBuilder backUpDatabase(String database, String diskPath, Boolean isDifferentialBackup) throws BuzzerSQLBuilderException {
        throw new BuzzerSQLBuilderException("Not supported on Generic DB");
        //return this;
    }


    public SQLBuilder createTable(String tableName)throws BuzzerSQLBuilderException {
        this.validateTableName(tableName);
        this.sql.append(String.format(BuzzerSQLConstants.CREATE_TABLE_START,tableName));
        return this;
    }

    
    public SQLBuilder withColumns(Column... columns)throws BuzzerSQLBuilderException {
        this.validateColumns(columns);
//        Arrays.stream(columns).forEach(c->{
//            this.withColumn(c.getName(),c.getDataType(),c.getAliasName(),c.getNotNull(),c.getAutoGenerated(),c.getPK());
//        });
        return this;
    }

    @Override
    public SQLBuilder withColumn(String columnName, String sqlType, Boolean isNull) throws BuzzerSQLBuilderException {
        return null;
    }


    public SQLBuilder withColumn(String columnName, String sqlType, String aliasName, Boolean isNotNull, Boolean isAutoIncrement,Boolean isPK) throws BuzzerSQLBuilderException{


        return this;
    }

    
    public SQLBuilder withPK(String... columns) throws BuzzerSQLBuilderException{
        return this;
    }

    
    public SQLBuilder beginTransaction() {
        return this;
    }

    
    public SQLBuilder beginTransaction(String mode)throws BuzzerSQLBuilderException {
        return this;
    }

    
    public SQLBuilder setTransaction(String name) throws BuzzerSQLBuilderException{
        return this;
    }

    
    public SQLBuilder endTransaction() {
        return this;
    }

    
    public SQLBuilder commit() {
        return this;
    }

    
    public SQLBuilder rollback() {
        return null;
    }

    
    public SQLBuilder createSavePoint(String savePoint) throws BuzzerSQLBuilderException{
        return null;
    }

    
    public SQLBuilder releaseSavePoint(String savePoint) throws BuzzerSQLBuilderException{
        return null;
    }

    
    public SQLBuilder rollbackToSavePoint(String savePoint)throws BuzzerSQLBuilderException {
        return null;
    }

    
    public String toStringOmitSemiColon() {
        String sqlStatement=this.sql.toString();
        return sqlStatement.substring(0,sqlStatement.length()-1);
    }

    @Override
    public String toString() {
        return this.sql.toString();
    }

    private void validateDatabaseName(String database)throws BuzzerSQLBuilderException
    {
        if(StringUtils.isEmpty(database))
        {
            throw new BuzzerSQLBuilderException("Database name cannot be empty or null");
        }
    }

    private void validateTableName(String tablename)throws BuzzerSQLBuilderException
    {
        if(StringUtils.isEmpty(tablename))
        {
            throw new BuzzerSQLBuilderException("Table name cannot be empty or null");
        }
    }

    private void validateColumn(Column column)throws BuzzerSQLBuilderException
    {
        if(Objects.isNull(column) || StringUtils.isEmpty(column.getName()))
        {
            throw new BuzzerSQLBuilderException("column name cannot be empty or null");
        }
    }

    private void validateColumns(Column[] columns)throws BuzzerSQLBuilderException {
        if(ObjectUtils.isEmpty(columns) || columns.length==0)
        {
            throw new BuzzerSQLBuilderException("table cannot be created without the columns");
        }

    }
}
